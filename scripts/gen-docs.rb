#!/usr/bin/env ruby
require 'json'

## VERSIONED DOCS GENERATION ##

# If you want a specific version to be served as default, set this value to the
# branch/tag you want. Otherwise it will be the latest version on alphabetical order.
default_version = "master"

# This is a list to filter -out- tags we know are not valuable to generate docs for.
invalid_tags = ["0.1.0", "0.2.0", "0.3.0"]

# This is a list to filter -in- tags. Unless it's empty, where it will be ignored.
# If you want an empty tags list in the end (for some reason ¯\_(ツ)_/¯)
# you can cancel these filterings with both lists having the same values:
# invalid_tags = ["0.1.0"], valid_tags = ["0.1.0"]
valid_tags = []

# This a list of modules in which the Swift project is split on
modules = ["BowOptics", "BowRecursionSchemes", "BowGeneric", "BowFree", \
  "BowEffects", "BowRx", "BowBrightFutures", "Bow"]

# Generate the JSON files that will be needed later.
#
# @param version [String] The version for which the JSON will be generated.
# @param modules [Array] The modules present in the project to split the JSON info into.
# @return [nil] nil.
def generate_json(version, modules)
  `mkdir -p docs-json/#{version}`
  modules.each { |m| `sourcekitten doc --spm-module #{m} > ./docs-json/#{version}/#{m}.json` }
end

# Join the previously generated JSON files into one single file.
#
# @param version [String] The version for which the JSON will be generated.
# @param modules [Array] The modules present in the project to join the JSON info.
# @return [nil] nil.
def join_json(version, modules)
  joined = []
  modules.map { |m| JSON.parse(File.read("./docs-json/#{version}/#{m}.json")) } \
    .each { |json| joined += json }

  File.open("./docs-json/#{version}/all.json","w") do |f|
    f.write(joined.to_json)
  end
end

# Generate the Jekyll site through Nef based on the contents source.
#
# @param version [String] The version for which the nef docs site will be generated.
# @return [nil] nil.
def generate_nef_site(version)
  system "echo Generating nef site for #{version}"
  system "nef jekyll --project contents/Documentation --output docs --main-page contents/Home.md"
  system "JEKYLL_ENV=production BUNDLE_GEMFILE=./docs/Gemfile bundle exec jekyll build -s ./docs -d ./docs/#{version} -b bow/#{version}"
  system "ls -la docs"
  system "ls -la docs/#{version}"
end

# Generate the Jazzy site based on previouly created JSON file.
#
# @param version [String] The version for which the Jazzy API docs site will be generated.
# @return [nil] nil.
def generate_api_site(version)
  system "echo Generating API site for #{version}"
  system "BUNDLE_GEMFILE=./docs/Gemfile bundle exec jazzy -o ./docs/#{version}/api-docs --sourcekitten-sourcefile ./docs-json/#{version}/all.json --author Bow --author_url https://bow-swift.io --github_url https://github.com/bow-swift/bow --module Bow --root-url https://bow-swift.io/#{version}/api-docs --theme docs/extra/bow-jazzy-theme"
  system "ls -la docs"
  system "ls -la docs/#{version}"
end


# Initial generic logic and dependencies for the docs site
`mkdir -p docs-json`
system "swift package clean"
system "swift build"
system "bundle install --gemfile ./docs/Gemfile --path vendor/bundle"

# Following logic will process and generate the different releases specific sites

# Initially, we generate the content available at master to be at /next path
generate_json("next", modules)
join_json("next", modules)
generate_nef_site("next")
generate_api_site("next")

# Then, tags will contain the list of Git tags present in the repo
tags = `git tag`.split("\n")

# This is done to avoid the need to write down all the tags when we want everything in
if !valid_tags.any?
  valid_tags = tags
end

if tags.any?
  filtered_out_tags = tags.reject { |t| invalid_tags.include? t }
  filtered_tags = filtered_out_tags.select { |t| valid_tags.include? t }
  filtered_tags.each { |t|
                        system "git checkout #{t}"
                        system "swift package clean"
                        system "swift build"
                        generate_nef_site("#{t}")
                        generate_json("#{t}", modules)
                        join_json("#{t}", modules)
                        generate_api_site("#{t}")
                      }
end

# The content available in the default branch will be generated by GH Pages itself
if tags.any? && default_version.to_s.empty?
  `git checkout #{tags.last}`
else
  `git checkout #{default_version}`
end
